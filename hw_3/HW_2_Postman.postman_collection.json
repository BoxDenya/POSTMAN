{
	"info": {
		"_postman_id": "9947fc02-9807-4248-b8c9-1b18f448067a",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21332469"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Denis');\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('34');\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"const req = request.data\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from response to request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from response to request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from response to request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family['u_salary_1_5_year'])\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year equal salary*4\", function () {\r",
							"    pm.expect(jsonData.family['u_salary_1_5_year']).to.eql(Number(req.salary * 4));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Denis",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"const req = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from response to request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from response to request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from response to request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check parameter the dog has name \", function () {\r",
							"    pm.expect(jsonData.family.pets['dog']).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check parameter the dog has age \", function () {\r",
							"    pm.expect(jsonData.family.pets['dog']).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check parameter the dog has name Luky \", function () {\r",
							"    pm.expect(jsonData.family.pets['dog'].name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check parameter the dog has age equal 4\", function () {\r",
							"    pm.expect(jsonData.family.pets['dog'].age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Denis&age=34&salary=4500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Denis"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "4500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"const req = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from response to request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age from response to request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(Number(req.age));\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData['salary'])\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData['salary'][0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData['salary'][1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData['salary'][2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 0 equal req.salary\", function () {\r",
							"    pm.expect(jsonData['salary'][0]).to.eql(Number(req.salary));\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 1 equal req.salary * 2\", function () {\r",
							"    pm.expect(Number(jsonData['salary'][1])).to.eql(Number(req.salary) * 2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 2 equal req.salary * 3\", function () {\r",
							"    pm.expect(Number(jsonData['salary'][2])).to.eql(Number(req.salary) * 3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name)\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age)\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0])\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(el => console.log(el))\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"const jsonData = pm.response.json()\r",
							"// 7. Спарсить request.\r",
							"const req = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start_qa_salary \", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check qa_salary_3.5_years\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check person\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"})\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary equal to request salary\", function() {\r",
							"    pm.expect(jsonData['start_qa_salary']).to.eql(Number(req.salary))\r",
							"})\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months equal to request salary*2\", function() {\r",
							"    pm.expect(jsonData['qa_salary_after_6_months']).to.eql(Number(req.salary) * 2)\r",
							"})\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months equal to request salary*2.7\", function() {\r",
							"    pm.expect(jsonData['qa_salary_after_12_months']).to.eql(Number(req.salary) * 2.7)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year equal to request salary*3.3\", function () { pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(Number(req.salary) * 3.3)\r",
							"})\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years equal request salaty*3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(Number(req.salary) * 3.8)\r",
							"})\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check u_name equal to request salary\", function () {\r",
							"    pm.expect(jsonData['person']['u_name'][1]).to.eql(Number(req.salary))\r",
							"})\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age equal to request age\", function () {\r",
							"    pm.expect(Number(jsonData['person']['u_age'])).to.eql(Number(req.age))\r",
							"})\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5 equal to request salary*4.2\", function () {\r",
							"    pm.expect(jsonData['person']['u_salary_5_years']).to.eql(Number(req.salary) * 4.2)\r",
							"})\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let person in jsonData['person']){\r",
							"    console.log(person)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "hw_2_Anatoliy_task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respSalary = pm.response.json().salary\r",
							"const reqSalary = +pm.request.url.query.get('salary')\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"respSalary.forEach((salary, index) => {\r",
							"    pm.test(`${reqSalary} * ${index + 1} === ${salary}`, () => {\r",
							"        pm.expect(reqSalary * (index + 1)).to.eql(+salary)\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "hw_2_Anatoliy_task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. http://162.55.220.72:5005/object_info_3\r",
							"// Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось \r",
							"// ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"\r",
							"const req = pm.request.url.query.toObject()\r",
							"\r",
							"const resp = {\r",
							"    age: String(pm.response.json().age),\r",
							"    name: pm.response.json().name,\r",
							"    salary: String(pm.response.json().salary)\r",
							"}\r",
							"\r",
							"pm.test(\"Compare fields request and response\", () => {\r",
							"    pm.expect(req).to.deep.eql(resp)\r",
							"})\r",
							"\r",
							"//version two\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"const respObj = {}\r",
							"for(const key in req){\r",
							"    respObj[key] = isNaN(jsonData[key]) ? jsonData[key] : +jsonData[key]\r",
							"    req[key] = isNaN(req[key]) ? req[key] : +req[key]\r",
							"    console.log(`resp - ${respObj[key]}`)\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"2.0 Compare fields request and response\", () => {\r",
							"    pm.expect(req).to.deep.eql(respObj)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "hw_2_Anatoliy_task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4. http://162.55.220.72:5005/user_info_2\r",
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки \r",
							"// делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, \r",
							"// чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). \r",
							"// Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"//4.1\r",
							"const keyIsInJson = ['start_qa_salary', \"qa_salary_after_6_months\", \"qa_salary_after_3.5_years\", \"qa_salary_after_12_months\", \"qa_salary_after_1.5_year\"] \r",
							"const resp = pm.response.json()\r",
							"\r",
							"keyIsInJson.forEach(key => {\r",
							"    pm.test(`Response has ${key}`, () => {\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    })\r",
							"})\r",
							"\r",
							"//4.2\r",
							"const salary = pm.environment.get('salary')\r",
							"console.log(salary)\r",
							"const couters = {\r",
							"    'start_qa_salary': 1, \r",
							"    'qa_salary_after_6_months': 2,\r",
							"    \"qa_salary_after_3.5_years\": 3.8,\r",
							"    \"qa_salary_after_12_months\": 2.7,\r",
							"    \"qa_salary_after_1.5_year\": 3.3\r",
							"}\r",
							"\r",
							"for(const key in couters){\r",
							"    pm.test(`${key} response = salary * ${couters[key]}`, () => {\r",
							"        pm.expect(+resp[key]).to.eql(salary * couters[key])\r",
							"    })\r",
							"}\r",
							"\r",
							"//4.3 \r",
							"\r",
							"couters['person'] = ''\r",
							"\r",
							"for(const key in couters) {\r",
							"    pm.test(`Response has ${key}`, () => {\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    })\r",
							"    if(key != 'person') {\r",
							"        pm.test(`${key} response = salary * ${couters[key]}`, () => {\r",
							"        pm.expect(+resp[key]).to.eql(salary * couters[key])\r",
							"    })\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "hw_2_Anatoliy_task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\r",
							"\r",
							"// Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. \r",
							"// Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. \r",
							"// Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! \r",
							"// Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные \r",
							"// проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. \r",
							"// В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"// Требования:\r",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"const age = pm.iterationData.get('age')\r",
							"const name = pm.iterationData.get('name')\r",
							"const salary = pm.iterationData.get('salary')\r",
							"\r",
							"function ageValidation(value) {\r",
							"    return value && !isNaN(value) && value > 17 && value < 121 && Number.isInteger(+value)\r",
							"}\r",
							"\r",
							"function salaryValidation(value) {\r",
							"    return value && !isNaN(value) && value > 0 && value < 1000001 && Number.isInteger(+value)\r",
							"}\r",
							"\r",
							"function nameValidation(value) {\r",
							"    return value && value.length > 2 && value.length < 41 && value.trim() === value\r",
							"}\r",
							"\r",
							"function validate(name, age, salary) {\r",
							"   return ageValidation(age) && salaryValidation(salary) && nameValidation(name)\r",
							"}\r",
							"\r",
							"if(validate(name, age, salary)) {\r",
							"    pm.test(`200 code age == ${age}, salary == ${salary}, name == ${name}`, () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							" } else {\r",
							"    pm.test(`NOT 200 code age == ${age}, salary == ${salary}, name == ${name}`, () => {\r",
							"        pm.response.to.not.have.status(200)\r",
							"    })\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}